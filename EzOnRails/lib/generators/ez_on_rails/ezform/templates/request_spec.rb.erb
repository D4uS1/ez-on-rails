<%- namespace_prefix = class_path.length > 0 ? "#{class_path.join('_')}_" : '' -%>
# frozen_string_literal: true

require 'rails_helper'

# Spec for testing the access for the <%= class_name %> form.
# Testing whether a non looged in user can not get any action, because the access should be denied.
# Testing whether some non super admin logged in user (called andrew here) can not get any action,
# because the access should be denied.
# Testing whether some super_admin can get the actions, because the access is granted.
RSpec.describe '<%= class_path.length > 0 ? "#{class_path.join('/')}/" : '' %><%= plural_file_name%>', type: :request do
  # users
  let(:andrew) { create(:andrew) } # non admin user
  let(:super_admin) { User.super_admin } # super administrator user

  # Test data
  let(:<%= file_name %>_params) do
    {
      <%= file_name %>: {
      <%- attributes_with_values(class_name, attributes).each do |key, value| -%>
        <%= key %>: <%= value.is_a?(String) ? "'#{value}'": value %>
      <%- end -%>
      }
    }
  end

  # for test of update, destroy and show actions
  context 'when not logged in' do
    it 'can not get index' do
      get <%= namespace_prefix %><%= file_name %>_url

      expect(response).to redirect_to(new_user_session_path)
    end

    it 'can not post submit' do
      post <%= namespace_prefix %><%= file_name %>_url, params: <%= file_name %>_params

      expect(response).to redirect_to(new_user_session_path)
    end

    it 'can not get success' do
      get <%= namespace_prefix %><%= file_name %>_success_url

      expect(response).to redirect_to(new_user_session_path)
    end
  end

  context 'when logged in as andrew' do
    before do
      sign_in andrew
    end

    it 'can not get index' do
      get <%= namespace_prefix %><%= file_name %>_url

      expect(response).to have_http_status(:forbidden)
    end

    it 'can not post submit' do
      post <%= namespace_prefix %><%= file_name %>_url, params: <%= file_name %>_params

      expect(response).to have_http_status(:forbidden)
    end

    it 'can not get success' do
      get <%= namespace_prefix %><%= file_name %>_success_url

      expect(response).to have_http_status(:forbidden)
    end
  end

  context 'when logged in as super admin' do
    before do
      sign_in super_admin
    end

    it 'can get index' do
      get <%= namespace_prefix %><%= file_name %>_url

      expect(response).to have_http_status(:success)
    end

    it 'can post submit' do
      post <%= namespace_prefix %><%= file_name %>_url, params: <%= file_name %>_params

      expect(response).to redirect_to(<%= namespace_prefix %><%= file_name %>_success_url)
    end

    it 'can get success' do
      get <%= namespace_prefix %><%= file_name %>_success_url

      expect(response).to have_http_status(:success)
    end
  end
end

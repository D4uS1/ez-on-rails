<%- namespace_prefix = class_path.length > 0 ? "#{class_path.join('_')}_" : '' -%>
# frozen_string_literal: true

require 'rails_helper'

# Spec for testing the access for the actions in <%= class_name %> API.
# Testing whether a non looged in user can not get any action, because the access should be denied.
# Testing whether some logged in user can get the actions, because the access is granted.
RSpec.describe '<%= class_path.length > 0 ? "#{([ 'api'] + class_path).join('/')}/" : '' %><%= plural_file_name %>', type: :request do
  let(:default_headers) { { ACCEPT: 'application/json', 'api-version': API_VERSION } }

  # Test data
<%- if @resource -%>
  let(:<%= @resource_underscored %>) { create(:<%= @resource_namespace_prefix %><%= @resource_underscored %>) }
  <%- association_attrs = association_attributes(@resource, nil) -%>
  <%- if association_attrs.length > 0 -%>
  let(:<%= @resource_underscored %>_params) do
    attributes_for(
      :<%= @resource_namespace_prefix %><%= @resource_underscored %>,
      <%-association_attrs.each_with_index do |attribute, index| -%>
      <%= attribute %>_id: create(:<%= @resource_namespace_prefix %><%= attribute %>).id<%= index < association_attrs.length - 1 ? ',' : '' %>
      <%- end -%>
    )
  end
  <%- else -%>
  let(:<%= @resource_underscored %>_params) { attributes_for(:<%= @resource_namespace_prefix %><%= @resource_underscored %>) }
  <%- end -%>
<%- end -%>

    <%- if @resource && @authenticable -%>
  # users
  let(:andrew) { create(:andrew) } # non admin user
  let(:auth_headers) do
    auth_header_data = authorization_header_info(andrew)

    default_headers.merge({
      uid: auth_header_data[:uid],
      'access-token': auth_header_data[:token],
      client: auth_header_data[:client]
    })
  end

  context 'when not logged in' do
    it 'can not get index' do
      get api_<%= namespace_prefix %><%= @resource_underscored.pluralize %>_url, headers: default_headers

      expect(response).to have_http_status(:unauthorized)
    end

    it 'can not search' do
      post search_api_<%= namespace_prefix %><%= @resource_underscored.pluralize %>_url,
           params: { filter: { field: 'id', operator: 'eq', value: <%= @resource_underscored %>.id } },
           headers: default_headers

      expect(response).to have_http_status(:unauthorized)
    end

    it 'can not show <%= @resource_underscored %>' do
      get api_<%= namespace_prefix %><%= @resource_underscored %>_url(id: <%= @resource_underscored %>.id), headers: default_headers

      expect(response).to have_http_status(:unauthorized)
    end

    it 'can not create' do
      records_count = <%= @resource %>.count

      post api_<%= namespace_prefix %><%= @resource_underscored.pluralize %>_url,
           params: { <%= @resource_underscored %>: <%= @resource_underscored %>_params },
           headers: default_headers

      expect(response).to have_http_status(:unauthorized)
      expect(<%= @resource %>.count).to eq(records_count)
    end

    it 'can not update <%= @resource_underscored %>' do
      patch api_<%= namespace_prefix %><%= @resource_underscored %>_url(id: <%= @resource_underscored %>.id),
            params: { <%= @resource_underscored %>: <%= @resource_underscored %>_params },
            headers: default_headers

      expect(response).to have_http_status(:unauthorized)
    end

    it 'can not destroy <%= @resource_underscored %>' do
      records_count = <%= @resource_underscored %>.class.count
      delete api_<%= namespace_prefix %><%= @resource_underscored %>_url(id: <%= @resource_underscored %>.id), headers: default_headers

      expect(response).to have_http_status(:unauthorized)
      expect(<%= @resource %>.count).to eql(records_count)
    end
  end

  context 'when logged in as andrew' do
    it 'can get index' do
      <%= @resource_underscored %>

      get api_<%= namespace_prefix %><%= @resource_underscored.pluralize %>_url, headers: auth_headers

      response_body = JSON.parse(response.body)

      expect(response).to have_http_status(:success)
      expect(response_body).to eq(json_from_view('<%= @resource_namespace_path %><%= @resource_underscored.pluralize %>/_<%= @resource_underscored.pluralize %>', {
        <%= @resource_underscored.pluralize %>: [<%= @resource_underscored %>]
      }))
    end

    context 'when request search' do
      it 'only returns filtered results' do
        create(:<%= @resource_namespace_prefix %><%= @resource_underscored %>)
          <%= @resource_underscored %>

        post search_api_<%= namespace_prefix %><%= @resource_underscored.pluralize %>_url,
             params: { filter: { field: 'id', operator: 'eq', value: <%= @resource_underscored %>.id } },
             headers: auth_headers

        response_body = JSON.parse(response.body)

        expect(response).to have_http_status(:success)
        expect(response_body['results']).to eq(
          json_from_view('<%= @resource_namespace_path %><%= @resource_underscored.pluralize %>/_<%= @resource_underscored.pluralize %>', {
            <%= @resource_underscored.pluralize %>: [<%= @resource_underscored %>]
          })
        )
      end

      it 'only returns results for specified page' do
        create(:<%= @resource_namespace_prefix %><%= @resource_underscored %>)
          <%= @resource_underscored %>

        post search_api_<%= namespace_prefix %><%= @resource_underscored.pluralize %>_url,
             params: { page: 1, page_size: 1 },
             headers: auth_headers

        response_body = JSON.parse(response.body)

        expect(response).to have_http_status(:success)
        expect(response_body['results']).to eq(
          json_from_view('<%= @resource_namespace_path %><%= @resource_underscored.pluralize %>/_<%= @resource_underscored.pluralize %>', {
            <%= @resource_underscored.pluralize %>: [<%= @resource_underscored %>]
          })
        )
        expect(response_body['pages_count']).to eq(2)
      end

      it 'returns results with specified order and order_direction' do
        second_record = create(:<%= @resource_namespace_prefix %><%= @resource_underscored %>)
          <%= @resource_underscored %>

        post search_api_<%= namespace_prefix %><%= @resource_underscored.pluralize %>_url,
             params: { order: 'created_at', order_direction: 'desc' },
             headers: auth_headers

        response_body = JSON.parse(response.body)

        expect(response).to have_http_status(:success)
        expect(response_body['results']).to eq(
          json_from_view('<%= @resource_namespace_path %><%= @resource_underscored.pluralize %>/_<%= @resource_underscored.pluralize %>', {
            <%= @resource_underscored.pluralize %>: [<%= @resource_underscored %>, second_record]
          })
        )
      end
    end

    it 'can show <%= @resource_underscored %>' do
      get api_<%= namespace_prefix %><%= @resource_underscored %>_url(id: <%= @resource_underscored %>.id), headers: auth_headers

      response_body = JSON.parse(response.body)

      expect(response).to have_http_status(:success)
      expect(response_body).to eq(json_from_view('<%= @resource_namespace_path %><%= @resource_underscored.pluralize %>/_<%= @resource_underscored %>', {
        <%= @resource_underscored %>: <%= @resource_underscored %>
      }))
    end

    it 'can create <%= @resource_underscored %>' do
      records_count = <%= @resource %>.count

      post api_<%= namespace_prefix %><%= @resource_underscored.pluralize %>_url,
           params: { <%= @resource_underscored %>: <%= @resource_underscored %>_params },
           headers: auth_headers
      created_object = <%= @resource %>.last

      response_body = JSON.parse(response.body)

      expect(response).to have_http_status(:success)
      expect(<%= @resource %>.count).to eq(records_count + 1)
      expect(response_body).to eq(json_from_view('<%= @resource_namespace_path %><%= @resource_underscored.pluralize %>/_<%= @resource_underscored %>', {
        <%= @resource_underscored %>: created_object
      }))
    end

    it 'can update <%= @resource_underscored %>' do
      patch api_<%= namespace_prefix %><%= @resource_underscored %>_url(id: <%= @resource_underscored %>.id),
            params: { <%= @resource_underscored %>: <%= @resource_underscored %>_params },
            headers: auth_headers

      response_body = JSON.parse(response.body)
      <%= @resource_underscored %>.reload

      expect(response).to have_http_status(:success)
      expect(response_body).to eq(json_from_view('<%= @resource_namespace_path %><%= @resource_underscored.pluralize %>/_<%= @resource_underscored %>', {
        <%= @resource_underscored %>: <%= @resource_underscored %>
      }))
    end

    it 'can destroy <%= @resource_underscored %>' do
      records_count = <%= @resource_underscored %>.class.count

      delete api_<%= namespace_prefix %><%= @resource_underscored %>_url(id: <%= @resource_underscored %>.id), headers: auth_headers

      expect(response).to have_http_status(:success)
      expect(<%= @resource %>.count).to eql(records_count - 1)
    end
  end
  <%- elsif @resource && !@authenticable -%>
  context 'when not logged in' do
    it 'can get index' do
      <%= @resource_underscored %>

      get api_<%= namespace_prefix %><%= @resource_underscored.pluralize %>_url,
          headers: default_headers

      response_body = JSON.parse(response.body)

      expect(response).to have_http_status(:success)
      expect(response_body).to eq(json_from_view('<%= @resource_namespace_path %><%= @resource_underscored.pluralize %>/_<%= @resource_underscored.pluralize %>', {
        <%= @resource_underscored.pluralize %>: [<%= @resource_underscored %>]
      }))
    end

    context 'when request search' do
      it 'only returns filtered results' do
        create(:<%= @resource_namespace_prefix %><%= @resource_underscored %>)
          <%= @resource_underscored %>

        post search_api_<%= namespace_prefix %><%= @resource_underscored.pluralize %>_url,
             params: { filter: { field: 'id', operator: 'eq', value: <%= @resource_path_underscored %>.id } },
             headers: auth_headers

        response_body = JSON.parse(response.body)

        expect(response).to have_http_status(:success)
        expect(response_body['results']).to eq(json_from_view('<%= @resource_namespace_path %><%= @resource_underscored.pluralize %>/_<%= @resource_underscored.pluralize %>', {
          <%= @resource_underscored.pluralize %>: [<%= @resource_underscored %>]
        }))
      end

      it 'only returns results for specified page' do
        create(:<%= @resource_namespace_prefix %><%= @resource_underscored %>)
          <%= @resource_underscored %>

        post search_api_<%= namespace_prefix %><%= @resource_underscored.pluralize %>_url,
             params: { page: 1, page_size: 1 },
             headers: auth_headers

        response_body = JSON.parse(response.body)

        expect(response).to have_http_status(:success)
        expect(response_body['results']).to eq(json_from_view('<%= @resource_namespace_path %><%= @resource_underscored.pluralize %>/_<%= @resource_underscored.pluralize %>', {
          <%= @resource_underscored.pluralize %>: [<%= @resource_underscored %>]
        }))
        expect(response_body['pages_count']).to eq(2)
      end

      it 'returns results with specified order and order_direction' do
        second_record = create(:<%= @resource_namespace_prefix %><%= @resource_underscored %>)
          <%= @resource_underscored %>

        post search_api_<%= namespace_prefix %><%= @resource_underscored.pluralize %>_url,
             params: { order: 'created_at', order_direction: 'desc' },
             headers: auth_headers

        response_body = JSON.parse(response.body)

        expect(response).to have_http_status(:success)
        expect(response_body['results']).to eq(json_from_view('<%= @resource_namespace_path %><%= @resource_underscored.pluralize %>/_<%= @resource_underscored.pluralize %>', {
          <%= @resource_underscored.pluralize %>: [<%= @resource_underscored %>, second_record]
        }))
      end
    end

    it 'can show <%= @resource_underscored %>' do
      get api_<%= namespace_prefix %><%= @resource_underscored %>_url(id: <%= @resource_underscored %>.id),
        headers: default_headers

      response_body = JSON.parse(response.body)

      expect(response).to have_http_status(:success)
      expect(response_body).to eq(json_from_view('<%= @resource_namespace_path %><%= @resource_underscored.pluralize %>/_<%= @resource_underscored %>', {
        <%= @resource_underscored %>: <%= @resource_underscored %>
      }))
    end

    it 'can create <%= @resource_underscored %>' do
      records_count = <%= @resource %>.count

      post api_<%= namespace_prefix %><%= @resource_underscored.pluralize %>_url,
           params: { <%= @resource_underscored %>: <%= @resource_underscored %>_params },
           headers: default_headers
      created_object = <%= @resource %>.last

      response_body = JSON.parse(response.body)

      expect(response).to have_http_status(:success)
      expect(<%= @resource %>.count).to eq(records_count + 1)
      expect(response_body).to eq(json_from_view('<%= @resource_namespace_path %><%= @resource_underscored.pluralize %>/_<%= @resource_underscored %>', {
        <%= @resource_underscored %>: created_object
      }))
    end

    it 'can update <%= @resource_underscored %>' do
      patch api_<%= namespace_prefix %><%= @resource_underscored %>_url(id: <%= @resource_underscored %>.id),
        params: { <%= @resource_underscored %>: <%= @resource_underscored %>_params },
        headers: default_headers

      response_body = JSON.parse(response.body)
        <%= @resource_underscored %>.reload

      expect(response).to have_http_status(:success)
      expect(response_body).to eq(json_from_view('<%= @resource_namespace_path %><%= @resource_underscored.pluralize %>/_<%= @resource_underscored %>', {
        <%= @resource_underscored %>: <%= @resource_underscored %>
      }))
    end

    it 'can destroy <%= @resource_underscored %>' do
      records_count = <%= @resource_underscored %>.class.count

      delete api_<%= namespace_prefix %><%= @resource_underscored %>_url(id: <%= @resource_underscored %>.id),
        headers: default_headers

      expect(response).to have_http_status(:success)
      expect(<%= @resource %>.count).to eql(records_count - 1)
    end
  end
  <%- elsif @authenticable -%>
  # users
  let(:andrew) { create(:andrew) } # non admin user
  let(:auth_headers) do
    auth_header_data = authorization_header_info(andrew)

    default_headers.merge({
                            uid: auth_header_data[:uid],
                            'access-token': auth_header_data[:token],
                            client: auth_header_data[:client]
                          })
  end

  context 'when not logged in' do
    <%- actions.each do |action| -%>
    it 'can not get <%= action %>' do
      get api_<%= namespace_prefix %><%= file_name %>_<%= action %>_url, headers: default_headers

      expect(response).to have_http_status(:unauthorized)
    end

    <%- end -%>
  end

  context 'when logged as andrew' do
    <%- actions.each do |action| -%>
    it 'can not get <%= action %>' do
      get api_<%= namespace_prefix %><%= file_name %>_<%= action %>_url, headers: auth_headers

      expect(response).to have_http_status(:success)
    end

    <%- end -%>
  end
  <%- else  -%>
  context 'when not logged in' do
    <%- actions.each do |action| -%>
    it 'can not get <%= action %>' do
      get api_<%= namespace_prefix %><%= file_name %>_<%= action %>_url, headers: default_headers

      expect(response).to have_http_status(:success)
    end
    <%- end -%>
  end
  <%- end -%>
end

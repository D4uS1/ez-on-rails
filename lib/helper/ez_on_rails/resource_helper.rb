# frozen_string_literal: true

# Module for helper methods used by the generators affecting scaffolds
# generated by ez_on_rails.
module EzOnRails::ResourceHelper
  # Returns a hash of attributes including its types of the resource defined by its
  # name. The name is expected to be the full class path, including its namespaces.
  # The attributes are identified by the ActiveModel.
  # The attributes hash contains the attribute names as keys. Hence the result format will be:
  # {
  #   attr_1: { type: :string },
  #   attr_2: { type: :association }
  # }
  # The result will contain all attributes except the ones given by the except parameter.
  def attributes_with_types(resource_name, except = %i[owner_id created_at updated_at id])
    class_const = Class.const_get(resource_name)
    columns_hash = class_const.columns_hash.symbolize_keys
    columns_hash.except(*except).to_h { |key, _val| [key, columns_hash[key].type.to_sym] }
  end

  # Returns a hash of attribuites having example values for testing purposes.
  # The name is expected to be the full class path, including its namespaces.
  # If attributes is not passed, the resource having the specified name is expected to be already existent.
  # In this case the attributes and its types will be derived from the model class.
  # Otherwise the passed attributes is expected to have the format of the rails generator attributes data.
  # The resulting hash will containing correct typed values for each attribute of the resource, e.g:
  # {
  #   attr_1: 'some string',
  #   attr_2: 2
  # }
  def attributes_with_values(resource_name, attributes = nil)
    if attributes
      attributes_with_types = {}

      attributes.each do |attribute|
        attributes_with_types[attribute.name.to_sym] = attribute.type.to_sym
      end
    else
      attributes_with_types = attributes_with_types(resource_name)
    end

    attributes_with_types.to_h do |attr, type|
      # specify some test value
      test_val = case type
                 when :binary, :integer, :primary_key
                   1
                 when :boolean
                   true
                 when :date
                   Time.zone.today.to_s
                 when :decimal, :float
                   1.0
                 when :datetime, :time, :timestamp
                   Time.zone.now.to_s
                 else
                   Faker::Lorem.sentence
                 end

      # return key assiging test value
      [attr, test_val]
    end
  end

  # Returns all attribute keys having association types in the attributes hash.
  # Only associations saving the id in the model itself will be returned. Hence
  # only associations resulting to belongs_to will be returned.
  # The attributes hash is expected to be the hash used by rails generators.
  # if no attributes are passed, the class having the specified resource_name
  # will be used to identify the associations.
  def association_attributes(resource_name, attributes = nil)
    # given by attributes, -> ezscaff
    if attributes
      assoc_attr = attributes.select { |attribute| %i[association references belongs_to].include? attribute.type }
      return assoc_attr.map(&:name)
    end

    # given by resource_name, -> ezapi
    reflected_associations = Class.const_get(resource_name).reflect_on_all_associations
    result = []
    reflected_associations.each do |association_reflection|
      next unless association_reflection.is_a? ActiveRecord::Reflection::BelongsToReflection

      result.push association_reflection.name.to_s unless association_reflection.name == :owner
    end
    result
  end
end
